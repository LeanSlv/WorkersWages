//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class WorkersWagesApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: AccountLoginRequest | undefined): Promise<AccountLoginResponse> {
        let url_ = this.baseUrl + "/api/Account/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<AccountLoginResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AccountLoginResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AccountLoginResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    register(body: AccountRegisterRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Account/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param name (optional) 
     * @param number (optional) 
     * @return Success
     */
    manufactoriesGET(name: string | null | undefined, number: string | null | undefined, limit: number, offset: number): Promise<ManufactoryListResponse> {
        let url_ = this.baseUrl + "/api/Manufactories?";
        if (name !== undefined && name !== null)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (number !== undefined && number !== null)
            url_ += "Number=" + encodeURIComponent("" + number) + "&";
        if (limit === undefined || limit === null)
            throw new Error("The parameter 'limit' must be defined and cannot be null.");
        else
            url_ += "Limit=" + encodeURIComponent("" + limit) + "&";
        if (offset === undefined || offset === null)
            throw new Error("The parameter 'offset' must be defined and cannot be null.");
        else
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processManufactoriesGET(_response);
        });
    }

    protected processManufactoriesGET(response: Response): Promise<ManufactoryListResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ManufactoryListResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ManufactoryListResponse>(null as any);
    }

    /**
     * @return Success
     */
    manufactoriesPOST(body: ManufactoryCreateRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/Manufactories";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processManufactoriesPOST(_response);
        });
    }

    protected processManufactoriesPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    manufactoriesGET2(idQuery: number, idPath: string): Promise<ManufactoryDetailsResponse> {
        let url_ = this.baseUrl + "/api/Manufactories/{id}?";
        if (idPath === undefined || idPath === null)
            throw new Error("The parameter 'idPath' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + idPath));
        if (idQuery === undefined || idQuery === null)
            throw new Error("The parameter 'idQuery' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + idQuery) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processManufactoriesGET2(_response);
        });
    }

    protected processManufactoriesGET2(response: Response): Promise<ManufactoryDetailsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ManufactoryDetailsResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ManufactoryDetailsResponse>(null as any);
    }

    /**
     * @return Success
     */
    manufactoriesPUT(id: number, body: ManufactoryEditRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/Manufactories/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processManufactoriesPUT(_response);
        });
    }

    protected processManufactoriesPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    manufactoriesDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Manufactories/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processManufactoriesDELETE(_response);
        });
    }

    protected processManufactoriesDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param name (optional) 
     * @return Success
     */
    professionsGET(name: string | null | undefined, limit: number, offset: number): Promise<ProfessionListResponse> {
        let url_ = this.baseUrl + "/api/Professions?";
        if (name !== undefined && name !== null)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (limit === undefined || limit === null)
            throw new Error("The parameter 'limit' must be defined and cannot be null.");
        else
            url_ += "Limit=" + encodeURIComponent("" + limit) + "&";
        if (offset === undefined || offset === null)
            throw new Error("The parameter 'offset' must be defined and cannot be null.");
        else
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processProfessionsGET(_response);
        });
    }

    protected processProfessionsGET(response: Response): Promise<ProfessionListResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProfessionListResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProfessionListResponse>(null as any);
    }

    /**
     * @return Success
     */
    professionsPOST(body: ProfessionCreateRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/Professions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processProfessionsPOST(_response);
        });
    }

    protected processProfessionsPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    professionsPUT(id: number, body: ProfessionEditRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/Professions/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processProfessionsPUT(_response);
        });
    }

    protected processProfessionsPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    professionsDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Professions/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processProfessionsDELETE(_response);
        });
    }

    protected processProfessionsDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param professionId (optional) 
     * @param rank (optional) 
     * @return Success
     */
    salariesGET(professionId: number | null | undefined, rank: number | null | undefined, limit: number, offset: number): Promise<SalaryListResponse> {
        let url_ = this.baseUrl + "/api/Salaries?";
        if (professionId !== undefined && professionId !== null)
            url_ += "ProfessionId=" + encodeURIComponent("" + professionId) + "&";
        if (rank !== undefined && rank !== null)
            url_ += "Rank=" + encodeURIComponent("" + rank) + "&";
        if (limit === undefined || limit === null)
            throw new Error("The parameter 'limit' must be defined and cannot be null.");
        else
            url_ += "Limit=" + encodeURIComponent("" + limit) + "&";
        if (offset === undefined || offset === null)
            throw new Error("The parameter 'offset' must be defined and cannot be null.");
        else
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSalariesGET(_response);
        });
    }

    protected processSalariesGET(response: Response): Promise<SalaryListResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SalaryListResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SalaryListResponse>(null as any);
    }

    /**
     * @return Success
     */
    salariesPOST(body: SalaryCreateRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/Salaries";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSalariesPOST(_response);
        });
    }

    protected processSalariesPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    salariesPUT(idQuery: number, idPath: string, body: SalaryEditRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/Salaries/{id}?";
        if (idPath === undefined || idPath === null)
            throw new Error("The parameter 'idPath' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + idPath));
        if (idQuery === undefined || idQuery === null)
            throw new Error("The parameter 'idQuery' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + idQuery) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSalariesPUT(_response);
        });
    }

    protected processSalariesPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    salariesDELETE(idQuery: number, idPath: string): Promise<void> {
        let url_ = this.baseUrl + "/api/Salaries/{id}?";
        if (idPath === undefined || idPath === null)
            throw new Error("The parameter 'idPath' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + idPath));
        if (idQuery === undefined || idQuery === null)
            throw new Error("The parameter 'idQuery' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + idQuery) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSalariesDELETE(_response);
        });
    }

    protected processSalariesDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param manufactoryId (optional) 
     * @param weekDay (optional) 
     * @return Success
     */
    schedulesGET(manufactoryId: number | null | undefined, weekDay: WeekDays | undefined, limit: number, offset: number): Promise<ScheduleListResponse> {
        let url_ = this.baseUrl + "/api/Schedules?";
        if (manufactoryId !== undefined && manufactoryId !== null)
            url_ += "ManufactoryId=" + encodeURIComponent("" + manufactoryId) + "&";
        if (weekDay === null)
            throw new Error("The parameter 'weekDay' cannot be null.");
        else if (weekDay !== undefined)
            url_ += "WeekDay=" + encodeURIComponent("" + weekDay) + "&";
        if (limit === undefined || limit === null)
            throw new Error("The parameter 'limit' must be defined and cannot be null.");
        else
            url_ += "Limit=" + encodeURIComponent("" + limit) + "&";
        if (offset === undefined || offset === null)
            throw new Error("The parameter 'offset' must be defined and cannot be null.");
        else
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSchedulesGET(_response);
        });
    }

    protected processSchedulesGET(response: Response): Promise<ScheduleListResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ScheduleListResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ScheduleListResponse>(null as any);
    }

    /**
     * @return Success
     */
    schedulesPOST(body: ScheduleCreateRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/Schedules";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSchedulesPOST(_response);
        });
    }

    protected processSchedulesPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    schedulesPUT(id: number, body: ScheduleEditRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/Schedules/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSchedulesPUT(_response);
        });
    }

    protected processSchedulesPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    schedulesDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Schedules/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSchedulesDELETE(_response);
        });
    }

    protected processSchedulesDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param workerLastName (optional) 
     * @param manufactoryId (optional) 
     * @param professionId (optional) 
     * @param rank (optional) 
     * @return Success
     */
    wagesGET(workerLastName: string | null | undefined, manufactoryId: number | null | undefined, professionId: number | null | undefined, rank: number | null | undefined, limit: number, offset: number): Promise<WageListResponse> {
        let url_ = this.baseUrl + "/api/Wages?";
        if (workerLastName !== undefined && workerLastName !== null)
            url_ += "WorkerLastName=" + encodeURIComponent("" + workerLastName) + "&";
        if (manufactoryId !== undefined && manufactoryId !== null)
            url_ += "ManufactoryId=" + encodeURIComponent("" + manufactoryId) + "&";
        if (professionId !== undefined && professionId !== null)
            url_ += "ProfessionId=" + encodeURIComponent("" + professionId) + "&";
        if (rank !== undefined && rank !== null)
            url_ += "Rank=" + encodeURIComponent("" + rank) + "&";
        if (limit === undefined || limit === null)
            throw new Error("The parameter 'limit' must be defined and cannot be null.");
        else
            url_ += "Limit=" + encodeURIComponent("" + limit) + "&";
        if (offset === undefined || offset === null)
            throw new Error("The parameter 'offset' must be defined and cannot be null.");
        else
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWagesGET(_response);
        });
    }

    protected processWagesGET(response: Response): Promise<WageListResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WageListResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WageListResponse>(null as any);
    }

    /**
     * @return Success
     */
    wagesPOST(body: WageCreateRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/Wages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWagesPOST(_response);
        });
    }

    protected processWagesPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    wagesGET2(idQuery: number, idPath: string): Promise<WageDetailsResponse> {
        let url_ = this.baseUrl + "/api/Wages/{id}?";
        if (idPath === undefined || idPath === null)
            throw new Error("The parameter 'idPath' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + idPath));
        if (idQuery === undefined || idQuery === null)
            throw new Error("The parameter 'idQuery' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + idQuery) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWagesGET2(_response);
        });
    }

    protected processWagesGET2(response: Response): Promise<WageDetailsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WageDetailsResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WageDetailsResponse>(null as any);
    }

    /**
     * @return Success
     */
    wagesPUT(id: number, body: WageEditRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/Wages/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWagesPUT(_response);
        });
    }

    protected processWagesPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    wagesDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Wages/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWagesDELETE(_response);
        });
    }

    protected processWagesDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    allowances(wageId: number): Promise<WageAllowanceListResponse> {
        let url_ = this.baseUrl + "/api/Wages/{wageId}/allowances";
        if (wageId === undefined || wageId === null)
            throw new Error("The parameter 'wageId' must be defined.");
        url_ = url_.replace("{wageId}", encodeURIComponent("" + wageId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAllowances(_response);
        });
    }

    protected processAllowances(response: Response): Promise<WageAllowanceListResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WageAllowanceListResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WageAllowanceListResponse>(null as any);
    }

    /**
     * @return Success
     */
    addAllowance(wageId: number, body: WageAddAllowanceRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/Wages/{wageId}/add-allowance";
        if (wageId === undefined || wageId === null)
            throw new Error("The parameter 'wageId' must be defined.");
        url_ = url_.replace("{wageId}", encodeURIComponent("" + wageId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddAllowance(_response);
        });
    }

    protected processAddAllowance(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    editAllowance(wageId: number, allowanceId: number, body: WageEditAllowanceRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/Wages/{wageId}/edit-allowance/{allowanceId}";
        if (wageId === undefined || wageId === null)
            throw new Error("The parameter 'wageId' must be defined.");
        url_ = url_.replace("{wageId}", encodeURIComponent("" + wageId));
        if (allowanceId === undefined || allowanceId === null)
            throw new Error("The parameter 'allowanceId' must be defined.");
        url_ = url_.replace("{allowanceId}", encodeURIComponent("" + allowanceId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEditAllowance(_response);
        });
    }

    protected processEditAllowance(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    deleteAllowance(wageId: number, allowanceId: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Wages/{wageId}/delete-allowance/{allowanceId}";
        if (wageId === undefined || wageId === null)
            throw new Error("The parameter 'wageId' must be defined.");
        url_ = url_.replace("{wageId}", encodeURIComponent("" + wageId));
        if (allowanceId === undefined || allowanceId === null)
            throw new Error("The parameter 'allowanceId' must be defined.");
        url_ = url_.replace("{allowanceId}", encodeURIComponent("" + allowanceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteAllowance(_response);
        });
    }

    protected processDeleteAllowance(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ApiErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class AccountLoginRequest implements IAccountLoginRequest {
    userName!: string;
    password!: string;

    constructor(data?: IAccountLoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): AccountLoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AccountLoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data;
    }
}

export interface IAccountLoginRequest {
    userName: string;
    password: string;
}

export class AccountLoginResponse implements IAccountLoginResponse {
    token?: string | undefined;
    expiration?: Date;

    constructor(data?: IAccountLoginResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
            this.expiration = _data["expiration"] ? new Date(_data["expiration"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AccountLoginResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AccountLoginResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["expiration"] = this.expiration ? this.expiration.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAccountLoginResponse {
    token?: string | undefined;
    expiration?: Date;
}

export class ApiErrorResponse implements IApiErrorResponse {
    errors?: { [key: string]: string[]; } | undefined;

    constructor(data?: IApiErrorResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["errors"]) {
                this.errors = {} as any;
                for (let key in _data["errors"]) {
                    if (_data["errors"].hasOwnProperty(key))
                        (<any>this.errors)![key] = _data["errors"][key] !== undefined ? _data["errors"][key] : [];
                }
            }
        }
    }

    static fromJS(data: any): ApiErrorResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ApiErrorResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.errors) {
            data["errors"] = {};
            for (let key in this.errors) {
                if (this.errors.hasOwnProperty(key))
                    (<any>data["errors"])[key] = this.errors[key];
            }
        }
        return data;
    }
}

export interface IApiErrorResponse {
    errors?: { [key: string]: string[]; } | undefined;
}

export class AccountRegisterRequest implements IAccountRegisterRequest {
    firstName!: string;
    middleName?: string | undefined;
    lastName!: string;
    email?: string | undefined;
    userName!: string;
    password!: string;

    constructor(data?: IAccountRegisterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.userName = _data["userName"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): AccountRegisterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AccountRegisterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data;
    }
}

export interface IAccountRegisterRequest {
    firstName: string;
    middleName?: string | undefined;
    lastName: string;
    email?: string | undefined;
    userName: string;
    password: string;
}

export class ManufactoryInfo implements IManufactoryInfo {
    id!: number;
    name!: string;
    number!: string;
    created!: Date;
    updated!: Date;

    constructor(data?: IManufactoryInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.number = _data["number"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ManufactoryInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ManufactoryInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["number"] = this.number;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        return data;
    }
}

export interface IManufactoryInfo {
    id: number;
    name: string;
    number: string;
    created: Date;
    updated: Date;
}

export class ManufactoryListResponse implements IManufactoryListResponse {
    manufactories!: ManufactoryInfo[];
    totalCount!: number;

    constructor(data?: IManufactoryListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.manufactories = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["manufactories"])) {
                this.manufactories = [] as any;
                for (let item of _data["manufactories"])
                    this.manufactories!.push(ManufactoryInfo.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): ManufactoryListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ManufactoryListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.manufactories)) {
            data["manufactories"] = [];
            for (let item of this.manufactories)
                data["manufactories"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }
}

export interface IManufactoryListResponse {
    manufactories: ManufactoryInfo[];
    totalCount: number;
}

export class ManufactoryCreateRequest implements IManufactoryCreateRequest {
    name!: string;
    number!: string;
    headFIO!: string;
    headPhotoId?: number | undefined;

    constructor(data?: IManufactoryCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.number = _data["number"];
            this.headFIO = _data["headFIO"];
            this.headPhotoId = _data["headPhotoId"];
        }
    }

    static fromJS(data: any): ManufactoryCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ManufactoryCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["number"] = this.number;
        data["headFIO"] = this.headFIO;
        data["headPhotoId"] = this.headPhotoId;
        return data;
    }
}

export interface IManufactoryCreateRequest {
    name: string;
    number: string;
    headFIO: string;
    headPhotoId?: number | undefined;
}

export class ManufactoryDetailsResponse implements IManufactoryDetailsResponse {
    name!: string;
    number!: string;
    headFIO!: string;
    headPhotoId?: number | undefined;

    constructor(data?: IManufactoryDetailsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.number = _data["number"];
            this.headFIO = _data["headFIO"];
            this.headPhotoId = _data["headPhotoId"];
        }
    }

    static fromJS(data: any): ManufactoryDetailsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ManufactoryDetailsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["number"] = this.number;
        data["headFIO"] = this.headFIO;
        data["headPhotoId"] = this.headPhotoId;
        return data;
    }
}

export interface IManufactoryDetailsResponse {
    name: string;
    number: string;
    headFIO: string;
    headPhotoId?: number | undefined;
}

export class ManufactoryEditRequest implements IManufactoryEditRequest {
    name!: string;
    number!: string;
    headFIO!: string;
    headPhotoId?: number | undefined;

    constructor(data?: IManufactoryEditRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.number = _data["number"];
            this.headFIO = _data["headFIO"];
            this.headPhotoId = _data["headPhotoId"];
        }
    }

    static fromJS(data: any): ManufactoryEditRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ManufactoryEditRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["number"] = this.number;
        data["headFIO"] = this.headFIO;
        data["headPhotoId"] = this.headPhotoId;
        return data;
    }
}

export interface IManufactoryEditRequest {
    name: string;
    number: string;
    headFIO: string;
    headPhotoId?: number | undefined;
}

export class ProfessionInfo implements IProfessionInfo {
    id!: number;
    name!: string;
    created!: Date;
    updated!: Date;

    constructor(data?: IProfessionInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ProfessionInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ProfessionInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        return data;
    }
}

export interface IProfessionInfo {
    id: number;
    name: string;
    created: Date;
    updated: Date;
}

export class ProfessionListResponse implements IProfessionListResponse {
    professions!: ProfessionInfo[];
    totalCount!: number;

    constructor(data?: IProfessionListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.professions = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["professions"])) {
                this.professions = [] as any;
                for (let item of _data["professions"])
                    this.professions!.push(ProfessionInfo.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): ProfessionListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProfessionListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.professions)) {
            data["professions"] = [];
            for (let item of this.professions)
                data["professions"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }
}

export interface IProfessionListResponse {
    professions: ProfessionInfo[];
    totalCount: number;
}

export class ProfessionCreateRequest implements IProfessionCreateRequest {
    name!: string;

    constructor(data?: IProfessionCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ProfessionCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ProfessionCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface IProfessionCreateRequest {
    name: string;
}

export class ProfessionEditRequest implements IProfessionEditRequest {
    name!: string;

    constructor(data?: IProfessionEditRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ProfessionEditRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ProfessionEditRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface IProfessionEditRequest {
    name: string;
}

export class SalaryInfo implements ISalaryInfo {
    id!: number;
    professionName!: string;
    rank!: number;
    amount!: number;
    created!: Date;
    updated!: Date;

    constructor(data?: ISalaryInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.professionName = _data["professionName"];
            this.rank = _data["rank"];
            this.amount = _data["amount"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SalaryInfo {
        data = typeof data === 'object' ? data : {};
        let result = new SalaryInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["professionName"] = this.professionName;
        data["rank"] = this.rank;
        data["amount"] = this.amount;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        return data;
    }
}

export interface ISalaryInfo {
    id: number;
    professionName: string;
    rank: number;
    amount: number;
    created: Date;
    updated: Date;
}

export class SalaryListResponse implements ISalaryListResponse {
    salaries!: SalaryInfo[];
    totalCount!: number;

    constructor(data?: ISalaryListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.salaries = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["salaries"])) {
                this.salaries = [] as any;
                for (let item of _data["salaries"])
                    this.salaries!.push(SalaryInfo.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): SalaryListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SalaryListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.salaries)) {
            data["salaries"] = [];
            for (let item of this.salaries)
                data["salaries"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }
}

export interface ISalaryListResponse {
    salaries: SalaryInfo[];
    totalCount: number;
}

export class SalaryCreateRequest implements ISalaryCreateRequest {
    professionId!: number;
    rank!: number;
    amount!: number;

    constructor(data?: ISalaryCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.professionId = _data["professionId"];
            this.rank = _data["rank"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): SalaryCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SalaryCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["professionId"] = this.professionId;
        data["rank"] = this.rank;
        data["amount"] = this.amount;
        return data;
    }
}

export interface ISalaryCreateRequest {
    professionId: number;
    rank: number;
    amount: number;
}

export class SalaryEditRequest implements ISalaryEditRequest {
    professionId!: number;
    rank!: number;
    amount!: number;

    constructor(data?: ISalaryEditRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.professionId = _data["professionId"];
            this.rank = _data["rank"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): SalaryEditRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SalaryEditRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["professionId"] = this.professionId;
        data["rank"] = this.rank;
        data["amount"] = this.amount;
        return data;
    }
}

export interface ISalaryEditRequest {
    professionId: number;
    rank: number;
    amount: number;
}

export enum WeekDays {
    Monday = "Monday",
    Tuesday = "Tuesday",
    Wednesday = "Wednesday",
    Thursday = "Thursday",
    Friday = "Friday",
    Saturday = "Saturday",
    Sunday = "Sunday",
}

export class TimeSpan implements ITimeSpan {
    readonly ticks?: number;
    readonly days?: number;
    readonly hours?: number;
    readonly milliseconds?: number;
    readonly minutes?: number;
    readonly seconds?: number;
    readonly totalDays?: number;
    readonly totalHours?: number;
    readonly totalMilliseconds?: number;
    readonly totalMinutes?: number;
    readonly totalSeconds?: number;

    constructor(data?: ITimeSpan) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).ticks = _data["ticks"];
            (<any>this).days = _data["days"];
            (<any>this).hours = _data["hours"];
            (<any>this).milliseconds = _data["milliseconds"];
            (<any>this).minutes = _data["minutes"];
            (<any>this).seconds = _data["seconds"];
            (<any>this).totalDays = _data["totalDays"];
            (<any>this).totalHours = _data["totalHours"];
            (<any>this).totalMilliseconds = _data["totalMilliseconds"];
            (<any>this).totalMinutes = _data["totalMinutes"];
            (<any>this).totalSeconds = _data["totalSeconds"];
        }
    }

    static fromJS(data: any): TimeSpan {
        data = typeof data === 'object' ? data : {};
        let result = new TimeSpan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ticks"] = this.ticks;
        data["days"] = this.days;
        data["hours"] = this.hours;
        data["milliseconds"] = this.milliseconds;
        data["minutes"] = this.minutes;
        data["seconds"] = this.seconds;
        data["totalDays"] = this.totalDays;
        data["totalHours"] = this.totalHours;
        data["totalMilliseconds"] = this.totalMilliseconds;
        data["totalMinutes"] = this.totalMinutes;
        data["totalSeconds"] = this.totalSeconds;
        return data;
    }
}

export interface ITimeSpan {
    ticks?: number;
    days?: number;
    hours?: number;
    milliseconds?: number;
    minutes?: number;
    seconds?: number;
    totalDays?: number;
    totalHours?: number;
    totalMilliseconds?: number;
    totalMinutes?: number;
    totalSeconds?: number;
}

export class ScheduleInfo implements IScheduleInfo {
    id!: number;
    manufactoryId!: number;
    manufactoryDisplayName!: string;
    weekDay!: WeekDays;
    workingStart?: TimeSpan;
    workingEnd?: TimeSpan;
    breakStart?: TimeSpan;
    breakEnd?: TimeSpan;
    created!: Date;
    updated!: Date;

    constructor(data?: IScheduleInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.manufactoryId = _data["manufactoryId"];
            this.manufactoryDisplayName = _data["manufactoryDisplayName"];
            this.weekDay = _data["weekDay"];
            this.workingStart = _data["workingStart"] ? TimeSpan.fromJS(_data["workingStart"]) : <any>undefined;
            this.workingEnd = _data["workingEnd"] ? TimeSpan.fromJS(_data["workingEnd"]) : <any>undefined;
            this.breakStart = _data["breakStart"] ? TimeSpan.fromJS(_data["breakStart"]) : <any>undefined;
            this.breakEnd = _data["breakEnd"] ? TimeSpan.fromJS(_data["breakEnd"]) : <any>undefined;
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ScheduleInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ScheduleInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["manufactoryId"] = this.manufactoryId;
        data["manufactoryDisplayName"] = this.manufactoryDisplayName;
        data["weekDay"] = this.weekDay;
        data["workingStart"] = this.workingStart ? this.workingStart.toJSON() : <any>undefined;
        data["workingEnd"] = this.workingEnd ? this.workingEnd.toJSON() : <any>undefined;
        data["breakStart"] = this.breakStart ? this.breakStart.toJSON() : <any>undefined;
        data["breakEnd"] = this.breakEnd ? this.breakEnd.toJSON() : <any>undefined;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        return data;
    }
}

export interface IScheduleInfo {
    id: number;
    manufactoryId: number;
    manufactoryDisplayName: string;
    weekDay: WeekDays;
    workingStart?: TimeSpan;
    workingEnd?: TimeSpan;
    breakStart?: TimeSpan;
    breakEnd?: TimeSpan;
    created: Date;
    updated: Date;
}

export class ScheduleListResponse implements IScheduleListResponse {
    schedules!: ScheduleInfo[];
    totalCount!: number;

    constructor(data?: IScheduleListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.schedules = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["schedules"])) {
                this.schedules = [] as any;
                for (let item of _data["schedules"])
                    this.schedules!.push(ScheduleInfo.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): ScheduleListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ScheduleListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.schedules)) {
            data["schedules"] = [];
            for (let item of this.schedules)
                data["schedules"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }
}

export interface IScheduleListResponse {
    schedules: ScheduleInfo[];
    totalCount: number;
}

export class ScheduleCreateRequest implements IScheduleCreateRequest {
    manufactoryId!: number;
    weekDay!: WeekDays;
    workingStart?: TimeSpan;
    workingEnd?: TimeSpan;
    breakStart?: TimeSpan;
    breakEnd?: TimeSpan;

    constructor(data?: IScheduleCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.manufactoryId = _data["manufactoryId"];
            this.weekDay = _data["weekDay"];
            this.workingStart = _data["workingStart"] ? TimeSpan.fromJS(_data["workingStart"]) : <any>undefined;
            this.workingEnd = _data["workingEnd"] ? TimeSpan.fromJS(_data["workingEnd"]) : <any>undefined;
            this.breakStart = _data["breakStart"] ? TimeSpan.fromJS(_data["breakStart"]) : <any>undefined;
            this.breakEnd = _data["breakEnd"] ? TimeSpan.fromJS(_data["breakEnd"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ScheduleCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ScheduleCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["manufactoryId"] = this.manufactoryId;
        data["weekDay"] = this.weekDay;
        data["workingStart"] = this.workingStart ? this.workingStart.toJSON() : <any>undefined;
        data["workingEnd"] = this.workingEnd ? this.workingEnd.toJSON() : <any>undefined;
        data["breakStart"] = this.breakStart ? this.breakStart.toJSON() : <any>undefined;
        data["breakEnd"] = this.breakEnd ? this.breakEnd.toJSON() : <any>undefined;
        return data;
    }
}

export interface IScheduleCreateRequest {
    manufactoryId: number;
    weekDay: WeekDays;
    workingStart?: TimeSpan;
    workingEnd?: TimeSpan;
    breakStart?: TimeSpan;
    breakEnd?: TimeSpan;
}

export class ScheduleEditRequest implements IScheduleEditRequest {
    manufactoryId!: number;
    weekDay!: WeekDays;
    workingStart?: TimeSpan;
    workingEnd?: TimeSpan;
    breakStart?: TimeSpan;
    breakEnd?: TimeSpan;

    constructor(data?: IScheduleEditRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.manufactoryId = _data["manufactoryId"];
            this.weekDay = _data["weekDay"];
            this.workingStart = _data["workingStart"] ? TimeSpan.fromJS(_data["workingStart"]) : <any>undefined;
            this.workingEnd = _data["workingEnd"] ? TimeSpan.fromJS(_data["workingEnd"]) : <any>undefined;
            this.breakStart = _data["breakStart"] ? TimeSpan.fromJS(_data["breakStart"]) : <any>undefined;
            this.breakEnd = _data["breakEnd"] ? TimeSpan.fromJS(_data["breakEnd"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ScheduleEditRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ScheduleEditRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["manufactoryId"] = this.manufactoryId;
        data["weekDay"] = this.weekDay;
        data["workingStart"] = this.workingStart ? this.workingStart.toJSON() : <any>undefined;
        data["workingEnd"] = this.workingEnd ? this.workingEnd.toJSON() : <any>undefined;
        data["breakStart"] = this.breakStart ? this.breakStart.toJSON() : <any>undefined;
        data["breakEnd"] = this.breakEnd ? this.breakEnd.toJSON() : <any>undefined;
        return data;
    }
}

export interface IScheduleEditRequest {
    manufactoryId: number;
    weekDay: WeekDays;
    workingStart?: TimeSpan;
    workingEnd?: TimeSpan;
    breakStart?: TimeSpan;
    breakEnd?: TimeSpan;
}

export class WageInfo implements IWageInfo {
    id!: number;
    workerLastName!: string;
    manufactoryId!: number;
    manufactoryDisplayName!: string;
    professionName!: string;
    rank!: number;
    amount!: number;
    amountWithAllowances!: number;
    created!: Date;
    updated!: Date;

    constructor(data?: IWageInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.workerLastName = _data["workerLastName"];
            this.manufactoryId = _data["manufactoryId"];
            this.manufactoryDisplayName = _data["manufactoryDisplayName"];
            this.professionName = _data["professionName"];
            this.rank = _data["rank"];
            this.amount = _data["amount"];
            this.amountWithAllowances = _data["amountWithAllowances"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): WageInfo {
        data = typeof data === 'object' ? data : {};
        let result = new WageInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["workerLastName"] = this.workerLastName;
        data["manufactoryId"] = this.manufactoryId;
        data["manufactoryDisplayName"] = this.manufactoryDisplayName;
        data["professionName"] = this.professionName;
        data["rank"] = this.rank;
        data["amount"] = this.amount;
        data["amountWithAllowances"] = this.amountWithAllowances;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        return data;
    }
}

export interface IWageInfo {
    id: number;
    workerLastName: string;
    manufactoryId: number;
    manufactoryDisplayName: string;
    professionName: string;
    rank: number;
    amount: number;
    amountWithAllowances: number;
    created: Date;
    updated: Date;
}

export class WageListResponse implements IWageListResponse {
    wages!: WageInfo[];
    totalCount!: number;

    constructor(data?: IWageListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.wages = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["wages"])) {
                this.wages = [] as any;
                for (let item of _data["wages"])
                    this.wages!.push(WageInfo.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): WageListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new WageListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.wages)) {
            data["wages"] = [];
            for (let item of this.wages)
                data["wages"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }
}

export interface IWageListResponse {
    wages: WageInfo[];
    totalCount: number;
}

export class WageCreateRequest implements IWageCreateRequest {
    workerLastName!: string;
    manufactoryId!: number;
    professionId!: number;
    rank!: number;

    constructor(data?: IWageCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.workerLastName = _data["workerLastName"];
            this.manufactoryId = _data["manufactoryId"];
            this.professionId = _data["professionId"];
            this.rank = _data["rank"];
        }
    }

    static fromJS(data: any): WageCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new WageCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["workerLastName"] = this.workerLastName;
        data["manufactoryId"] = this.manufactoryId;
        data["professionId"] = this.professionId;
        data["rank"] = this.rank;
        return data;
    }
}

export interface IWageCreateRequest {
    workerLastName: string;
    manufactoryId: number;
    professionId: number;
    rank: number;
}

export class AllowanceInfo implements IAllowanceInfo {
    id!: number;
    name?: string | undefined;
    amount!: number;

    constructor(data?: IAllowanceInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): AllowanceInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AllowanceInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["amount"] = this.amount;
        return data;
    }
}

export interface IAllowanceInfo {
    id: number;
    name?: string | undefined;
    amount: number;
}

export class WageDetailsResponse implements IWageDetailsResponse {
    workerLastName!: string;
    manufactoryDisplayName!: string;
    professionName!: string;
    rank!: number;
    amount!: number;
    amountWithAllowances!: number;
    allowances!: AllowanceInfo[];

    constructor(data?: IWageDetailsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.allowances = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.workerLastName = _data["workerLastName"];
            this.manufactoryDisplayName = _data["manufactoryDisplayName"];
            this.professionName = _data["professionName"];
            this.rank = _data["rank"];
            this.amount = _data["amount"];
            this.amountWithAllowances = _data["amountWithAllowances"];
            if (Array.isArray(_data["allowances"])) {
                this.allowances = [] as any;
                for (let item of _data["allowances"])
                    this.allowances!.push(AllowanceInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WageDetailsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new WageDetailsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["workerLastName"] = this.workerLastName;
        data["manufactoryDisplayName"] = this.manufactoryDisplayName;
        data["professionName"] = this.professionName;
        data["rank"] = this.rank;
        data["amount"] = this.amount;
        data["amountWithAllowances"] = this.amountWithAllowances;
        if (Array.isArray(this.allowances)) {
            data["allowances"] = [];
            for (let item of this.allowances)
                data["allowances"].push(item.toJSON());
        }
        return data;
    }
}

export interface IWageDetailsResponse {
    workerLastName: string;
    manufactoryDisplayName: string;
    professionName: string;
    rank: number;
    amount: number;
    amountWithAllowances: number;
    allowances: AllowanceInfo[];
}

export class WageEditRequest implements IWageEditRequest {
    workerLastName!: string;
    manufactoryId!: number;
    professionId!: number;
    rank!: number;

    constructor(data?: IWageEditRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.workerLastName = _data["workerLastName"];
            this.manufactoryId = _data["manufactoryId"];
            this.professionId = _data["professionId"];
            this.rank = _data["rank"];
        }
    }

    static fromJS(data: any): WageEditRequest {
        data = typeof data === 'object' ? data : {};
        let result = new WageEditRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["workerLastName"] = this.workerLastName;
        data["manufactoryId"] = this.manufactoryId;
        data["professionId"] = this.professionId;
        data["rank"] = this.rank;
        return data;
    }
}

export interface IWageEditRequest {
    workerLastName: string;
    manufactoryId: number;
    professionId: number;
    rank: number;
}

export class WageAllowanceListResponse implements IWageAllowanceListResponse {
    allowances?: AllowanceInfo[] | undefined;

    constructor(data?: IWageAllowanceListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["allowances"])) {
                this.allowances = [] as any;
                for (let item of _data["allowances"])
                    this.allowances!.push(AllowanceInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WageAllowanceListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new WageAllowanceListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.allowances)) {
            data["allowances"] = [];
            for (let item of this.allowances)
                data["allowances"].push(item.toJSON());
        }
        return data;
    }
}

export interface IWageAllowanceListResponse {
    allowances?: AllowanceInfo[] | undefined;
}

export class WageAddAllowanceRequest implements IWageAddAllowanceRequest {
    name?: string | undefined;
    amount!: number;

    constructor(data?: IWageAddAllowanceRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): WageAddAllowanceRequest {
        data = typeof data === 'object' ? data : {};
        let result = new WageAddAllowanceRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["amount"] = this.amount;
        return data;
    }
}

export interface IWageAddAllowanceRequest {
    name?: string | undefined;
    amount: number;
}

export class WageEditAllowanceRequest implements IWageEditAllowanceRequest {
    name?: string | undefined;
    amount!: number;

    constructor(data?: IWageEditAllowanceRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): WageEditAllowanceRequest {
        data = typeof data === 'object' ? data : {};
        let result = new WageEditAllowanceRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["amount"] = this.amount;
        return data;
    }
}

export interface IWageEditAllowanceRequest {
    name?: string | undefined;
    amount: number;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}